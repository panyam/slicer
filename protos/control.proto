syntax = "proto3";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
option go_package = "github.com/panyam/slicer/protos";
package protos;

enum ShardState {
  /**
   * Shard is active, available and can be served.
   */
  ACTIVE = 0;

  /**
   * Shard is unavailable - may never have been here.
   */
  UNAVAILABLE = 1;

  /**
   * Shard is being loaded after an assignment (eg a partition has been
   * assigned a shard it needs to build/initialize/copy from perhaps another replica).
   * This can also mean that a shard target came back after being offline
   * (eg due to a network partition) and the shard can be asked to resync/reload to
   * catch up.
   */
  SYNCING = 2;
}

/**
 * The control plane for managing where Screens are served out of.
 * As we go beyond a single host, screen services (mainly the streamer for now)
 * will be served from different shards and a single way to manage this is needed.
 * Whether the SoT for shard info/discovery/records is distributed or centralized
 * having a single service/endpoint serve this makes things extendible later on.
 */
service ControlService {
  // Called by clients tht want to know where to connect to for a particular shard.
  /**
   * Get the source of truth/current snapshot of assignments of a shard key
   * to a set of handler addresses
   */
  rpc GetShard(GetShardRequest) returns (GetShardResponse) {}

  /**
   * Called by what ever is interested in notifying the controller of
   * updates to membership.
   */
  rpc SaveShard(SaveShardRequest) returns (SaveShardResponse) {}

  /**
   * Called by admin to delete a shard completely or particular targets for it
   */
  rpc DeleteShard(DeleteShardRequest) returns (DeleteShardResponse) {}

  /**
   * Returns information about a host as to which shards it (manually) hosts.
   */
  rpc GetTargets(GetTargetsRequest) returns (GetTargetsResponse) {}

  /**
   * Called to ping a target's health status
   */
  rpc PingTarget(PingTargetRequest) returns (Target) {}

  /**
   * Called to update a target (most likely its status).
   */
  rpc SaveTarget(SaveTargetRequest) returns (Target) {}

  /**
   * Deletes/Removes a target - should also remove all associated shards.
   */
  rpc DeleteTargets(DeleteTargetsRequest) returns (DeleteTargetsResponse) {}

  /**
   * Return all hosts participating in this cluster.
   */
  rpc ListTargets(ListTargetsRequest) returns (ListTargetsResponse) {}

  /**
   * Called by clients interested in being notified about shard assignment updates.
   */
  rpc ConnectClient(stream ClientControlRequest) returns (stream ClientControlMessage);

  /**
   * Called by shard targets/hosts/producers that host the dataplane for a shard and can be
   * commanded to shard assignment requests.
   */
  rpc ConnectTarget(stream TargetControlRequest) returns (stream TargetControlMessage);
}

message GetTargetsRequest {
  repeated string address = 1;
  bool include_shards = 2;
}

message GetTargetsResponse {
  repeated Target targets = 1;
}

message Target {
  string address = 1;
  string status = 2;
  google.protobuf.Timestamp updated_at = 3;
  google.protobuf.Timestamp pinged_at = 4;
  repeated string tags = 5;
  repeated ShardKey shards = 6;
}

message ListTargetsRequest {
  bool include_shards = 1;
}

message ListTargetsResponse {
  repeated Target hosts = 1;
}

message PingTargetRequest {
  string address = 1;
}

message SaveTargetRequest {
  Target target = 1;
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteTargetsRequest {
  repeated string addresses = 1;
}

message DeleteTargetsResponse {
}

/**
 * A way to describe a shard.
 */
message ShardKey {
  string key = 1;
}

message GetShardRequest {
  ShardKey shard = 1;
}

message GetShardResponse {
  ShardKey key = 1;
  repeated ShardTarget targets = 2;
  map<string, Target> target_info = 3;
}

message Shard {
  ShardKey key = 1;
  repeated ShardTarget targets = 2;
}

message ShardTarget {
  google.protobuf.Timestamp created_at = 1;
  google.protobuf.Timestamp updated_at = 2;
  string target = 4;
  string status = 5;
}

message SaveShardRequest {
  ShardKey key = 1;
  repeated string added = 2;
  repeated string removed = 3;
  bool remove_all = 4;
}

message SaveShardResponse {
}

message DeleteShardRequest {
  ShardKey key = 1;
  repeated string addresses = 2;
}

message DeleteShardResponse {
}


message ClientControlRequest {
  oneof details {
    SubscribeRequest subscribe_request = 2;
    UnsubscribeRequest unsubscribe_request = 3;
  }
}

message TargetControlRequest {
  oneof details {
    ShardsUpdatedRequest shard_updated = 1;
  }
}

message ClientControlMessage {
  oneof details {
    ShardsUpdatedRequest shard_updated = 1;
  }
}

message TargetControlMessage {
  oneof details {
    AddShardsRequest add_shards_request = 2;
    RemoveShardsRequest remove_shards_request = 3;
  }
}

message SubscribeRequest {
  repeated Shard shards = 1;
}

message UnsubscribeRequest {
  repeated Shard shards = 1;
}

message AddShardsRequest {
  repeated Shard shards = 1;
}

message RemoveShardsRequest {
  repeated Shard shards = 1;
}

message ShardsUpdatedRequest {
  map<string, ShardState> old_states = 1;
  map<string, ShardState> new_states = 2;
}
